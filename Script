local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Rayfield Example Window",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Rayfield Interface Suite",
   LoadingSubtitle = "by Sirius",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Main", 4483362458) -- Title, Image

local Section = Tab:CreateSection("monday")

local Divider = Tab:CreateDivider()

-- CFrame positions
local HOME_CFRAME = CFrame.new(-242.376602, 10.8505239, -49.222084)
local AWAY_CFRAME = CFrame.new(319.823425, 10.8505239, -49.222084) * CFrame.Angles(0, math.rad(180), 0)
local originalCFrame = CFrame.new(0, 10, 0)  -- Set the original position for the football if necessary (replace with actual start position)

-- Function to get the football
local function getFootball()
    local football = workspace:FindFirstChild("Football")
    if football and football:IsA("BasePart") then
        return football
    else
        warn("Football not found or not a valid part.")
        return nil
    end
end

-- Home toggle
local HomeToggle = Tab:CreateToggle({
   Name = "Teleport Football (Home)",
   CurrentValue = false,
   Flag = "TeleportHomeToggle",
   Callback = function(Value)
      local football = getFootball()
      if football then
         if Value then
            -- Teleport to home
            football.CFrame = HOME_CFRAME
         else
            -- Reset to original position when toggle is off
            football.CFrame = originalCFrame
         end
      end
   end,
})

-- Away toggle
local AwayToggle = Tab:CreateToggle({
   Name = "Teleport Football (Away)",
   CurrentValue = false,
   Flag = "TeleportAwayToggle",
   Callback = function(Value)
      local football = getFootball()
      if football then
         if Value then
            -- Teleport to away
            football.CFrame = AWAY_CFRAME
         else
            -- Reset to original position when toggle is off
            football.CFrame = originalCFrame
         end
      end
   end,
})
